	Sustav se sastoji od dva alata.
	UserManagement služi kako bi administrator upravljao korisničkim računima i njima pripadnim zaporkama. Na raspolaganju su sljedeće četiri naredbe.
	1. add <username>: Preduvjet je za uspješno obavljanje naredbe nepostojanje navedenog korisničkog imena u bazi. U tom slučaju, ono se dodaje u bazu (ovdje tekstualnu datoteku) uz ostale podatke koji su navedeni u odjeljku passwd. Po pokretanju naredbe administrator mora upisati novu zaporku za to korisničko ime. Postupak pridruživanja lozinke korisničkom imenu opisan je u odjeljku za naredbu passwd.
	2. passwd <username>:  Kako bi se naredba uspješno izvela, korisničko ime mora postojati u bazi. Slijedi opis pridruživanja zaporke korisničkom imenu jednak za sve naredbe. Korisnik mora unijeti zaporku te ju još jednom potvrditi. Pritom se uneseni znakovi ne prikazuju na ekranu. U oba unosa zaporke se moraju podudarati. Usto, moraju biti odgovarajuće složenosti, koja je ovdje minimalno osam znakova, barem jedna brojka, te barem jedno veliko i malo slovo. Uz ime se zapisuje i nula kao negativna vrijednost zastavice za obaveznu promjenu zaporke pri sljedećoj prijavi korisnika, nula kao broj pogrešnih unosa zaporke te salt i sažetak salta i prethodno unesene lozinke. Salt se nasumično generira za svako korisničko ime.
	3. forcepass <username>: Korisničko ime mora postojati u bazi - inače se naredba ne izvršava uredno, već se ispisuje obavijest te izlazi iz programa. U zastavicu uz korisničko ime zapisuje se 1. Također, zaporka se na već opisan način mijenja u nasumičan niz znakova.
	4. del <username>: Korisničko ime ponovo mora postojati u bazi. Iz interne evidencije korisničkih imena i pripadajućih podataka implementirane pomoću HashMapa briše se zapis o navedenom korisničkom imenu. Pri svakom dohvatu evidencije ponovo se čita i parsira tekstualna datoteka s trenutnim stanjem baze. Evidencija se, sada bez izbrisanog zapisa, ponovo zapisuje u bazu brišući prijašnje stanje. 
	Login služi za oponašanje prijave korisnika u sustav. Jedina je naredba oblika "<username>". Pri korištenju mogući su različiti scenariji.
	1. uredna prijava: Navedeno korisničko ime postoji u bazi. Korisnika se pita da unese zaporku povezanu s tim korisničkim imenom. On to uspješno čini, tj. sažetak salta zapisanog uz korisničko ime i unesene zaporke podudara se sa sažetkom zapisanim u bazi. Ispisuje se poruka o uspješnoj prijavi.
	2. obavezna promjena zaporke: U slučaju da je zastavica uz korisničko ime u bazi postavljena, korisnik se upućuje na proceduru promjene zaporke opisane u odjeljku UserManagement.passwd. Ako se potom želi prijaviti u sustav, mora ponovo pokrenuti naredbu.
	3. pogrešna zaporka: Korisničko ime postoji u bazi, ali sažetak zapisanog salta i zaporke unesene po zahtjevu ne podudara se sa zapisanim sažetkom. Ako broj pogrešnih unosa zaporke za to korisničko ime nije premašilo određen broj, spisuje se obavijest o pogrešnom korisničkom imenu ili zaporki, povećava brojač pogrešnih unosa te izlazi iz programa. Ako je broj premašen, korisnik se blokira, tj. briše iz baze. Administrator tog korisnika mora ponovno ručno registrirati.
	4. nepostojeće korisničko ime: Iako se otkriva prije nego se uspoređuje sažetak s unesenom odnosno postojećom zaporkom, korisnika se ipak traži da unese zaporku te slijedi simulacija scenarija iz prethodnog odjeljka kako bi se spriječilo davanje dodanih informacija potencijalnom napadaču koji možda nema pristup bazi i ne zna koja korisnička imena postoje u sustavu. U posebnoj se datoteci vodi evidencija pogrešnih prijava za pojedina neispravna korisnička imena koja se ponaša kao i evidencija za ispravna.
	
MEHANIZMI ZAŠTITE S PREDAVANJA:
1. sustav obnavljanja lozinki: Implementirano zastavicom čijim postavljanjem administrator blokira prijavu korisnika dok mu se ne promijeni zaporka. Nova zaporka ne smije biti jednaka staroj. Vrlo korisna funkcionalnost kojom se u slučaju posjeda zapisa od strane napadača smanjuje vremenski okvir u kojem može i otkriti zaporku i napraviti štetu.

2. ispravna pohrana: generiranje slučajnog salta za svaku lozinku te njegova pohrana u izvornom obliku uz rezultat funkcije sažetka zaporke i salta: Upravo na ovaj način ostvarena je pohrana zaporki u ovoj vježbi. Slučajno generiranim saltom koji sudjeluje u izračunu sažetka svake zaporke sprečava se otkrivanje jednakih zaporki iz jednakih sažetaka. Također, sažetak skriva podatke o zaporki (poput duljine).

3. zaporke imaju minimalnu kompleksnost, nisu riječi iz rječnika niti već kompromitirane lozinke: U ovom se rješenju jednostavnom provjerom unesene zaporke provjerava njezina složenost, pri čemu je minimum onaj opisan u prethodnom tekstu. Također, pri promjeni zaporke ona ne smije biti jednaka trenutnoj. Ipak, provjera za riječi iz rječnika ili sve prijašnje ili kompromitirane zaporke previše je kompleksna za ovu vježbu, pa nije ostvarena.

4. dulje vrijeme čekanja nakon pogrešne prijave, blokiranje računa: Pri svakoj se pogrešnoj prijavi za korisničko ime (bilo registrirano ili ne) bilježi broj takvih prijava. Vrijeme čekanja prije ponovnog unosa lozinke u prijavi za to korisničko ime povećava se ovisno o tom broju. Nakon određene granice, račun se blokira - korisničko se ime briše iz baze. Ovim se povećava vrijeme potrebno za napad, kojem se na kraju blokiranjem i uklanja smisao.

5. jedinstvenost zaporke za različite servise, tajnost zaporke: Nije implementirano budući da ovisi o samom korisniku.

6. zaštita od vidljivosti tijekom unosa: Implementirano razredom Console i metodom Console.readPassword(). Ovo je prilično jednostavan način za sprečavanja tzv. shoulder-surfinga, napada kojim napadač jednostavno gledajući "preko ramena" korisniku otkriva nesakrivenu zaporku.

7. zaštita tijekom prijenosa: Nije implementirana budući da se u ovom rješenju ne komunicira s drugim računalom.
	

